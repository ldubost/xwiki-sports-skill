<?xml version="1.0" encoding="UTF-8"?>

<xwikidoc version="1.3" reference="Sports.Code.Tennis" locale="">
  <web>Sports.Code</web>
  <name>Tennis</name>
  <language/>
  <defaultLanguage>en</defaultLanguage>
  <translation>0</translation>
  <creator>xwiki:XWiki.Admin</creator>
  <creationDate>1546297200000</creationDate>
  <author>xwiki:XWiki.Admin</author>
  <contentAuthor>xwiki:XWiki.Admin</contentAuthor>
  <date>1546297200000</date>
  <contentUpdateDate>1546297200000</contentUpdateDate>
  <version>1.1</version>
  <title/>
  <comment/>
  <minorEdit>false</minorEdit>
  <syntaxId>xwiki/2.1</syntaxId>
  <hidden>false</hidden>
  <content>// {{groovy}}
import groovy.json.JsonOutput;

public class Tennis {
  def xwiki;
  def xcontext;
  def request;
  def response;
  def sports;

  def addDebug(str) {
    sports.addDebug(str);
  }

  def setXWiki(xwiki, xcontext, sports) {
    this.xwiki = xwiki;
    this.xcontext = xcontext;
    this.request = xcontext.request;
    this.response = xcontext.response;
    this.sports = sports;
  }

  def savePlayer(player, playerSpace) {
      def className = "Sports.Tennis.Players.Code.PlayersClass"
      if (player!=null &amp;&amp; player.trim()!="") {
       def playerPageName = playerSpace + "." + player;
       addDebug("Ready to save player " + playerPageName)
       if (!xwiki.exists(playerPageName)) {
          addDebug("Saving player " + playerPageName)
          def playerDoc = xwiki.getDocument(playerPageName)
          playerDoc.use(playerDoc.getObject(className, true))
          playerDoc.setTitle(player);
          playerDoc.save("Creating player")
       }
        return playerPageName;
      }
      return null;
  }

  
  def saveResults(games, source) {
    def className = "Sports.Tennis.Games.Code.GamesClass";
    for (g in games) {
      def player1PageName = savePlayer(g.player1, source.playerSpace)
      def player2PageName = savePlayer(g.player2, source.playerSpace)
      def winnerPageName = savePlayer(g.winner, source.playerSpace)
      addDebug("Ready to save game " + player1PageName + " " + player2PageName + " " + winnerPageName)
      if (player1PageName==null || player2PageName==null) {
        addDebug("No saving")
        continue;
      }
      def sid = "${source.competition}${source.year}${g.player1}${g.player2}"
      def id = sid.hashCode()
      if (id&lt;0) id=-id
      def gamePageName = "${source.gameSpace}.${id}";
      def sgamePageName = gamePageName.toString()
      def gameDoc = xwiki.getDocument(sgamePageName)
      if (gameDoc.isNew()||gameDoc.getObject(className)) {
          def needsSave = false;
          gameDoc.use(gameDoc.getObject(className, true))
          if (gameDoc.getValue("player1")!= player1PageName) {
             gameDoc.set("player1", player1PageName);
             addDebug("player1 changed")
             needsSave = true;
          }
          if (gameDoc.getValue("player2")!= player2PageName) {
             gameDoc.set("player2", player2PageName);
             addDebug("player2 changed")
             needsSave = true;
          }
          if (g.winner &amp;&amp; g.winner!="" &amp;&amp; gameDoc.getValue("winner")!= winnerPageName) {
             gameDoc.set("winner", winnerPageName);
             addDebug("winner changed")
             needsSave = true;
          }
          if (g.score &amp;&amp; g.score!="" &amp;&amp; gameDoc.getValue("score")!= g.score) {
             addDebug("score changed")
             gameDoc.set("score", g.score);
             needsSave = true;
          }
          if (gameDoc.getValue("competition")!= source.competition) {
             addDebug("competition changed")
             gameDoc.set("competition", source.competition);
             needsSave = true;
          }
          def currentYear = gameDoc.display("year")
          gameDoc.set("year", source.year);
          def newYear = gameDoc.display("year")
          if (currentYear!=newYear) {
             addDebug("year changed")
             needsSave = true;
          }
          if (needsSave) {
             addDebug("Saving game ${sgamePageName}")
             gameDoc.save("Creating game")
          }
       }
    }
  }

  def cleanScore (score) {
    if (score=="&lt;small&gt;w/o&lt;/small&gt;")
    return -1;
    if (score.contains("&lt;sup&gt;r&lt;/sup&gt;"))
    return -1;
    def s = score.replaceAll("'*","").replaceAll("&lt;sup&gt;.*(&lt;/sup&gt;)*","");
    if (s=="")
    return 0;
    else
      return Integer.parseInt(s.trim());
  }

  def getAllResults(data, currentPlayer) {
    def cacheId = data.hashCode();
    def games = []

    if (sports.cache.get(cacheId)!=null &amp;&amp; !request.force) {
      addDebug("From cache");
      games = sports.cache.get(cacheId);
    } else {
      def game = [:]
      def set = [:]
      def player1 = false;
      def m = data =~ /RD[0-9]-(.*?)=(.*)/
      addDebug("Found: " + m.count + " items");
      (0..&lt;m.count).each {
        if (m[it][1].contains("team")) {
          addDebug("In player")
          player1 = !player1
          if (player1) {
            if (game.player1!=null)
            games.add(game);
            game = [:]
            set = [:]
          }
          def player = m[it][2]
          def regex = /\[\[(.*?)(\||\])/
          def m1 = player =~ regex
          if (m1.count&gt;0) {
            def splayer = m1[0][1].replaceAll(" \\(.*\\)","")
            addDebug("Player: " + splayer);
            if (player1) {
              game.player1 = splayer
            } else {
              game.player2 = splayer
            }
          }
        } else {
          def score = m[it][2]
          def regex1 = /score[0-9]+-([0-9])/
          def m1 = m[it][1] =~ regex1
          if (m1 &amp;&amp; m1.count&gt;0) {
            def currentSet = set[m1[0][1]]
            addDebug("In score: " + currentSet + " " + cleanScore(score));
            if (currentSet==null) {
              set[m1[0][1]] = [:]
              currentSet = set[m1[0][1]];
            }
            if (player1) {
              currentSet.player1 = cleanScore(score)
            } else {
              currentSet.player2 = cleanScore(score)
              if (currentSet.player1&gt;currentSet.player2) {
                set["player1"] = (set["player1"]==null) ? 1 : set["player1"]+1;
              }
              else if (currentSet.player2&gt;currentSet.player1){
                set["player2"] = (set["player2"]==null) ? 1 : set["player2"]+1;
              }
              if (currentSet.player1==-1)
              game.winner = game.player2
              if (currentSet.player2==-1)
              game.winner = game.player1

              if (set["player1"]==3 || (set["player1"]==2 &amp;&amp; request.type=="1"))
              game.winner = game.player1
              if (set["player2"]==3 || (set["player2"]==2 &amp;&amp; request.type=="1"))
              game.winner = game.player2
            }
            if (!player1) {
              if (currentSet.player1&gt;0 || currentSet.player2&gt;0) {
                if (!game.score)
                game.score = "";
                else
                  game.score += " ";
                game.score += currentSet.player1 + " " + currentSet.player2
              }
            }
            game.set = set;
          }
        }
      } 
      // Adding the last game
      games.add(game);
      sports.cache.put(cacheId, games);
    }

    if (request.debug) {
      for (g in games) {
        addDebug("{{{ Game: ${g} }}}")
        addDebug("* Player1: ${g.player1}")
        addDebug("* Player2: ${g.player2}")
        addDebug("* Winner: ${g.winner}")
        addDebug("* Score: ${g.score}")
      }
    }

    return games;
  }
  
  def getResults(data, player) {
    def regex1 = (data =~ /(?ms)(===Finals===.*?===)/)
    def regex2 = (data =~ /(?ms)(===Top half===.*)/)
    def data1 = (regex1!=null &amp;&amp; regex1.size()&gt;0) ? regex1[0][1] : ""
    def data2 = (regex2!=null &amp;&amp; regex2.size()&gt;0) ? regex2[0][1] : ""
    if (request.debug) {
      addDebug("""Data1""")
      addDebug("""{{{ ${data1 }}}}""")
      addDebug("""Data2""")
      addDebug("""{{{ ${data2 }}}}""")
    }
    def games1 = getAllResults(data1, player);
    def games2 = getAllResults(data2, player);
    if (request.debug) {
      addDebug("""Results1: {{{ ${games1 }}}}""");
      addDebug("""Results2: {{{ ${games2 }}}}"""); 
    }
    def games = games2
    games.addAll(games1)
    return games;
  }
}
// {{/groovy}}</content>
</xwikidoc>
