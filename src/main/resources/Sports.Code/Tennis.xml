<?xml version="1.0" encoding="UTF-8"?>

<xwikidoc version="1.3" reference="Sports.Code.Tennis" locale="">
  <web>Sports.Code</web>
  <name>Tennis</name>
  <language/>
  <defaultLanguage>en</defaultLanguage>
  <translation>0</translation>
  <creator>xwiki:XWiki.Admin</creator>
  <creationDate>1546297200000</creationDate>
  <parent>Sports.Code.WebHome</parent>
  <author>xwiki:XWiki.Admin</author>
  <contentAuthor>xwiki:XWiki.Admin</contentAuthor>
  <date>1546297200000</date>
  <contentUpdateDate>1546297200000</contentUpdateDate>
  <version>1.1</version>
  <title/>
  <comment/>
  <minorEdit>false</minorEdit>
  <syntaxId>xwiki/2.1</syntaxId>
  <hidden>true</hidden>
  <content>// {{groovy}}
import groovy.json.JsonOutput;

public class Tennis {
  def xwiki;
  def xcontext;
  def request;
  def response;
  def sports;

  def addDebug(str) {
    sports.addDebug(str);
  }

  def setXWiki(xwiki, xcontext, sports) {
    this.xwiki = xwiki;
    this.xcontext = xcontext;
    this.request = xcontext.request;
    this.response = xcontext.response;
    this.sports = sports;
  }

  def cleanScore (score) {
    if (score=="&lt;small&gt;w/o&lt;/small&gt;")
    return -1;
    if (score.contains("&lt;sup&gt;r&lt;/sup&gt;"))
    return -1;
    def s = score.replaceAll("'*","").replaceAll("&lt;sup&gt;.*(&lt;/sup&gt;)*","");
    if (s=="")
    return 0;
    else
      return Integer.parseInt(s.trim());
  }

  def getAllResults(source, data, currentPlayer, roundMap) {
    def cacheId = data.hashCode();
    def games = []

    if (sports.cache.get(cacheId)!=null &amp;&amp; (request!=null &amp;&amp; !request.force)) {
      addDebug("From cache");
      games = sports.cache.get(cacheId);
    } else {
      def game = [:]
      def set = [:]
      def round = ""
      def player1 = false;
      def m = data =~ /(RD[0-9])-(.*?)=(.*)/
      addDebug("Found: " + m.count + " items");
      (0..&lt;m.count).each {
        round = m[it][1]
        if (m[it][2].contains("team")) {
          addDebug("In player")
          player1 = !player1
          if (player1) {
            if (game.player1!=null) {
              if (game.score==null || game.score.trim()=="") {
                if (game.score==null)
                  game.score = ""
                if (!game.finished)
                 game.future = true;
              }
              games.add(game);
            }
            game = [:]
            set = [:]
          }
          def player = m[it][3]
          game.level = roundMap.get(round) ? roundMap.get(round) : round;
          def regex = /\[\[(.*?)(\||\])/
          def m1 = player =~ regex
          if (m1.count&gt;0) {
            def splayer = m1[0][1].replaceAll(" \\(.*\\)","")
            addDebug("Player: " + splayer);
            if (player1) {
              game.player1 = splayer
            } else {
              game.player2 = splayer
            }
            game.title = game.player1 + " vs " + game.player2
          }
        } else {
          def score = m[it][3]
          def regex1 = /score[0-9]+-([0-9])/
          def m1 = m[it][2] =~ regex1
          if (m1 &amp;&amp; m1.count&gt;0) {
            def currentSet = set[m1[0][1]]
            addDebug("In score: " + currentSet + " " + cleanScore(score));
            if (currentSet==null) {
              set[m1[0][1]] = [:]
              currentSet = set[m1[0][1]];
            }
            if (player1) {
              currentSet.player1 = cleanScore(score)
            } else {
              currentSet.player2 = cleanScore(score)
              if (currentSet.player1&gt;currentSet.player2) {
                set["player1"] = (set["player1"]==null) ? 1 : set["player1"]+1;
              }
              else if (currentSet.player2&gt;currentSet.player1){
                set["player2"] = (set["player2"]==null) ? 1 : set["player2"]+1;
              }
              if (currentSet.player1==-1) {
                 game.winner = game.player2
                 game.finished = true;
                 game.future = false;
              } else if (currentSet.player2==-1) {
                 game.winner = game.player1
                 game.finished = true;
                 game.future = false;
              }

              def nbSets = source.nbSets;
              if (nbSets==null)
               nbSets = 3
              if (set["player1"]==nbSets) {
                 game.winner = game.player1
                 game.finished = true;
                 game.future = false;
              } else if (set["player2"]==nbSets) {
                 game.winner = game.player2
                 game.finished = true;
                 game.future = false;
              }
            }
            if (!player1) {
              if (currentSet.player1&gt;0 || currentSet.player2&gt;0) {
                if (!game.score)
                  game.score = "";
                else
                  game.score += " ";
                game.score += currentSet.player1 + " " + currentSet.player2
              }
            }
            game.set = set;
          }
        }
      }
      if (game.score==null || game.score.trim()=="") {
            if (game.score==null)
               game.score = ""
            if (!game.finished)
               game.future = true;
      }

      // Adding the last game
      games.add(game);
      sports.cache.put(cacheId, games);
    }

    if (request!=null &amp;&amp; request.debug) {
      for (g in games) {
        addDebug("{{{ Game: ${g} }}}")
        addDebug("* Player1: ${g.player1}")
        addDebug("* Player2: ${g.player2}")
        addDebug("* Winner: ${g.winner}")
        addDebug("* Score: ${g.score}")
      }
    }

    return games;
  }
  
  def getResults(data, player, source) {
    def regex1 = (data =~ /(?ms)(===Finals===.*?===)/)
    def regex2 = (data =~ /(?ms)(===Top half===.*)/)
    def data1 = (regex1!=null &amp;&amp; regex1.size()&gt;0) ? regex1[0][1] : ""
    def data2 = (regex2!=null &amp;&amp; regex2.size()&gt;0) ? regex2[0][1] : ""
    if (request!=null &amp;&amp; request.debug) {
      addDebug("""Data1""")
      addDebug("""{{{ ${data1 }}}}""")
      addDebug("""Data2""")
      addDebug("""{{{ ${data2 }}}}""")
    }
    def games1 = getAllResults(source, data1, player, ["RD1" : "Q", "RD2" : "S", "RD3" : "F"]);
    def games2 = getAllResults(source, data2, player, [:]);
    if (request!=null &amp;&amp; request.debug) {
      addDebug("""Results1: {{{ ${games1 }}}}""");
      addDebug("""Results2: {{{ ${games2 }}}}"""); 
    }
    def games = []
    games.addAll(games2)
    games.addAll(games1)
    return games;
  }
}
// {{/groovy}}</content>
</xwikidoc>
