<?xml version="1.0" encoding="UTF-8"?>

<xwikidoc version="1.3" reference="Sports.Code.Query" locale="">
  <web>Sports.Code</web>
  <name>Query</name>
  <language/>
  <defaultLanguage>en</defaultLanguage>
  <translation>0</translation>
  <creator>xwiki:XWiki.Admin</creator>
  <creationDate>1546297200000</creationDate>
  <parent>Sports.Code.WebHome</parent>
  <author>xwiki:XWiki.Admin</author>
  <contentAuthor>xwiki:XWiki.Admin</contentAuthor>
  <date>1546297200000</date>
  <contentUpdateDate>1546297200000</contentUpdateDate>
  <version>1.1</version>
  <title>Sports Results Query</title>
  <comment/>
  <minorEdit>false</minorEdit>
  <syntaxId>xwiki/2.1</syntaxId>
  <hidden>true</hidden>
  <content>{{velocity}}
#set($ok = $xwiki.jsx.use("Sports.Code.Query"))
{{html clean="false"}}
&lt;div class="col-sm-6"&gt;
&lt;form action="" onsubmit="window.go(this, true); return false;"&gt;
&lt;dt&gt;Player or Team:&lt;/dt&gt;&lt;dd&gt;&lt;input type="text" name="player" value="" /&gt;&lt;/dd&gt;
&lt;dt&gt;Competition:&lt;/dt&gt;&lt;dd&gt;&lt;select name="sport"&gt;&lt;/dd&gt;
#set($sg = $xwiki.parseGroovyFromPage("Sports.Code.Groovy"))
#set($ok = $sg.setXWiki($xwiki, $xcontext, $services))
#set($sources = $sg.loadSources(false))
#set($previousTitle = $source.title)
   #foreach($source in $sources)
     #if($previousTitle!=$source.title)
      #set($previousTitle = $source.title)
     &lt;option value="${source.sport}-${source.competition}-${source.year}-${source.type}"&gt;${source.title}&lt;/option&gt;
     #end
   #end
   &lt;/select&gt;&lt;br /&gt;
&lt;dt&gt;Number of results:&lt;/dt&gt;&lt;dd&gt;&lt;input type="text" name="lastNb" value="1" size="2" /&gt;&lt;/dd&gt;
&lt;dt&gt;Number of next games:&lt;/dt&gt;&lt;dd&gt;&lt;input type="text" name="nextNb" value="1" size="2" /&gt;&lt;/dd&gt;
  #if($hasAdmin)
&lt;dd&gt;&lt;input type="checkbox" name="save" value="1" /&gt; Save pages&lt;/dd&gt;
  #end
  &lt;input type="submit" value="Go" class="button"/&gt;
&lt;/form&gt;
&lt;/div&gt;
&lt;div class="col-sm-6"&gt;
&lt;form action="" onsubmit="window.go(this, false); return false;"&gt;
&lt;dt&gt;Player or Team:&lt;/dt&gt;&lt;dd&gt;&lt;input type="text" name="player" value="" /&gt;&lt;/dd&gt;
&lt;dt&gt;Sport or Competition:&lt;/dt&gt;&lt;dd&gt;&lt;input type="text" name="sport" value="" /&gt;&lt;/dd&gt;
&lt;dd&gt;&lt;input type="checkbox" name="type" value="1"/&gt; Women&lt;/dd&gt;
&lt;dt&gt;Number of results:&lt;/dt&gt;&lt;dd&gt;&lt;input type="text" name="lastNb" value="1" size="2" /&gt;&lt;/dd&gt;
&lt;dt&gt;Number of next games:&lt;dt&gt;&lt;dd&gt;&lt;input type="text" name="nextNb" value="1" size="2" /&gt;&lt;/dd&gt;
  #if($hasAdmin)
&lt;dd&gt;&lt;input type="checkbox" name="save" value="1" /&gt; Save pages&lt;/dd&gt;
  #end
&lt;dd&gt;&lt;input type="submit" value="Go" class="button"/&gt;&lt;/dd&gt;
&lt;/form&gt;
&lt;/div&gt;
&lt;div class="col-xs-12" id="voice"&gt;
&lt;input class="button" type="button" value="Start voice-recognition" onclick="window.startRecognition()" /&gt;
&lt;/div&gt;
&lt;div class="col-xs-12" id="results"&gt;
&lt;/div&gt;
{{/html}}
{{/velocity}}</content>
  <object>
    <name>Sports.Code.Query</name>
    <number>0</number>
    <className>XWiki.JavaScriptExtension</className>
    <guid>f05fba0f-459c-4980-b44a-4cb251092797</guid>
    <class>
      <name>XWiki.JavaScriptExtension</name>
      <customClass/>
      <customMapping/>
      <defaultViewSheet/>
      <defaultEditSheet/>
      <defaultWeb/>
      <nameField/>
      <validationScript/>
      <cache>
        <cache>0</cache>
        <defaultValue>long</defaultValue>
        <disabled>0</disabled>
        <displayType>select</displayType>
        <multiSelect>0</multiSelect>
        <name>cache</name>
        <number>5</number>
        <prettyName>Caching policy</prettyName>
        <relationalStorage>0</relationalStorage>
        <separator> </separator>
        <separators>|, </separators>
        <size>1</size>
        <unmodifiable>0</unmodifiable>
        <values>long|short|default|forbid</values>
        <classType>com.xpn.xwiki.objects.classes.StaticListClass</classType>
      </cache>
      <code>
        <contenttype>PureText</contenttype>
        <disabled>0</disabled>
        <editor>PureText</editor>
        <name>code</name>
        <number>2</number>
        <prettyName>Code</prettyName>
        <rows>20</rows>
        <size>50</size>
        <unmodifiable>0</unmodifiable>
        <classType>com.xpn.xwiki.objects.classes.TextAreaClass</classType>
      </code>
      <name>
        <disabled>0</disabled>
        <name>name</name>
        <number>1</number>
        <prettyName>Name</prettyName>
        <size>30</size>
        <unmodifiable>0</unmodifiable>
        <classType>com.xpn.xwiki.objects.classes.StringClass</classType>
      </name>
      <parse>
        <disabled>0</disabled>
        <displayFormType>select</displayFormType>
        <displayType>yesno</displayType>
        <name>parse</name>
        <number>4</number>
        <prettyName>Parse content</prettyName>
        <unmodifiable>0</unmodifiable>
        <classType>com.xpn.xwiki.objects.classes.BooleanClass</classType>
      </parse>
      <use>
        <cache>0</cache>
        <disabled>0</disabled>
        <displayType>select</displayType>
        <multiSelect>0</multiSelect>
        <name>use</name>
        <number>3</number>
        <prettyName>Use this extension</prettyName>
        <relationalStorage>0</relationalStorage>
        <separator> </separator>
        <separators>|, </separators>
        <size>1</size>
        <unmodifiable>0</unmodifiable>
        <values>currentPage|onDemand|always</values>
        <classType>com.xpn.xwiki.objects.classes.StaticListClass</classType>
      </use>
    </class>
    <property>
      <cache>long</cache>
    </property>
    <property>
      <code>require(['jquery'], function($) {

  function displayText(text) {
    $("#results").html($("#results").html() + "&lt;br /&gt;" +  text);
  }

  function speak(text) {
    displayText(text);
    var synth = window.speechSynthesis;
    var utterThis = new SpeechSynthesisUtterance(text);
    utterThis.lang = 'en-US'
    synth.speak(utterThis);
  }

  function getResults(sport, competition, player, type, year, lastNb, nextNb, save) {
    var url = "/xwiki/bin/get/Sports/Code/JSON?outputSyntax=plain";
    if (type)
      url += "&amp;type=" + type;
    if (year) 
      url += "&amp;year=" + year;
    if (sport)
      url += "&amp;sport="+ sport.toLowerCase();
    if (competition)
      url += "&amp;competition=" + competition.toLowerCase();
    if (player)
      url += "&amp;player=" + encodeURIComponent(player.toLowerCase());
    if (lastNb)
      url += "&amp;lastNb=" + lastNb;
    if (nextNb)
      url += "&amp;nextNb=" + nextNb;
    if (save)
      url += "&amp;save=1";
    getResultsFromUrl(url, "Retrieving " + sport + ((player=="") ? "results" : " results for " + player))
  }

  function getLatestResults() {
    var url = "/xwiki/bin/get/Sports/Code/GamesJSON?status=finished&amp;nb=3&amp;outputSyntax=plain"
    getResultsFromUrl(url, "Retrieving latest results")
  }

  function getNextGames() {
    var url = "/xwiki/bin/get/Sports/Code/GamesJSON?status=future&amp;nb=3&amp;outputSyntax=plain"
    getResultsFromUrl(url, "Retrieving next games")
  }

  function getResultsFromUrl(url, txt) {
       speak(txt);
       console.log("URL: " + url)
       displayText("Querying &lt;a href='" +  url + "'&gt;" + url + "&lt;/a&gt;");
       $.getJSON(url, function(result) {
           console.log(result);
           if (!result || !result.text || result.text.trim()=="")
            speak("No results found")
           else
            speak(result.text);
       }).error(function() { speak("An error occured while retrieving results")});

  }

  function go(form, select) {
     var sport = "";
     var competition = "";
     var year = "2019";
     var type = "0";
     var url;
     if (select) {
       var regex = /(.*?)-(.*?)-(.*?)-(.*)/;
       var found = form.sport.value.match(regex);

       sport = found[1].replace("vb", "volley-ball");
       competition = found[2];
       year = found[3];
       type = found[4];
       getResults(sport, competition, form.player.value, type, year, form.lastNb.value, form.nextNb.value, form.save &amp;&amp; form.save.checked)
     } else {
       sport = form.sport.value;
       if (form.type.checked)
        type = "1"
       getResults(sport, null, form.player.value, type, year, form.lastNb.value, form.nextNb.value, form.save &amp;&amp; form.save.checked)
     }
  }
  window.go = go;

  function findResults(transcript) {
   var type = "0"
   if (transcript=="latest results") {
     getLatestResults();
   } else if (transcript=="next games") {
     getNextGames();
   } else if (transcript.indexOf("results")!=-1) {
     var text = transcript;
     if (text.startsWith("women") || text.startsWith("woman")) {
       text = text.substring(6)
       type = "1"
     }
     text = text.replace("for ", "")
     var i = text.indexOf("results")
     var competition = text.substring(0, i).trim();
     var player = text.substring(i + 8).trim();
     displayText("Competition: " + competition + ", Player: " + player)
     getResults(competition, null, player, type, "2019", 1, 1, false)
   }
  }

  function startRecognition() {
   console.log("Start recognition")
   var SpeechRecognition = SpeechRecognition || webkitSpeechRecognition
   var recognizer = new SpeechRecognition();
   recognizer.lang = "en-US"

   recognizer.onresult = function (event) {
        var transcript = event.results[0][0].transcript +
        ' (' +
        (event.results[0][0].confidence * 100).toFixed(2) +
        '%)';
        displayText("Voice captured: " + transcript)
        findResults(event.results[0][0].transcript)
   }
   recognizer.start();
   displayText("Voice recognition started");
  }

  window.startRecognition = startRecognition;

  if ('serviceWorker' in navigator) {
    window.addEventListener('load', () =&gt; {
      navigator.serviceWorker.register("$xwiki.getDocument("Sports.Code.ServiceWorker").getURL("jsx")", { "scope" : "/" })
          .then((reg) =&gt; {
            console.log('Service worker registered.', reg);
          });
    });
  }
});</code>
    </property>
    <property>
      <name>Query</name>
    </property>
    <property>
      <parse>1</parse>
    </property>
    <property>
      <use>onDemand</use>
    </property>
  </object>
</xwikidoc>
