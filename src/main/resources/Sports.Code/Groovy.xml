<?xml version="1.0" encoding="UTF-8"?>

<xwikidoc version="1.3" reference="Sports.Code.Groovy" locale="">
  <web>Sports.Code</web>
  <name>Groovy</name>
  <language/>
  <defaultLanguage>en</defaultLanguage>
  <translation>0</translation>
  <creator>xwiki:XWiki.Admin</creator>
  <creationDate>1546297200000</creationDate>
  <author>xwiki:XWiki.Admin</author>
  <contentAuthor>xwiki:XWiki.Admin</contentAuthor>
  <date>1546297200000</date>
  <contentUpdateDate>1546297200000</contentUpdateDate>
  <version>1.1</version>
  <title/>
  <comment/>
  <minorEdit>false</minorEdit>
  <syntaxId>xwiki/2.1</syntaxId>
  <hidden>true</hidden>
  <content>// {{groovy}}
import groovy.json.JsonOutput;
import groovy.json.JsonSlurper;
import org.joda.time.format.DateTimeFormat;
import org.joda.time.DateTime;

public class Sports {
  def xwiki;
  def xcontext;
  def request;
  def response;
  def services;
  def countries;
  def codeGroovy;

  def debug = "";
  def times = [:]
  def startTime;
  def lastTime;
  def sources = [:]
  def static cache = [:]

  def addDebug(str) {
    debug += str + "\n";
  }

  def startTime() {
    startTime = (new Date()).getTime()
    lastTime = startTime;
  }

  def addTime(name) {
    def newTime = (new Date()).getTime()
    def dtime = newTime - lastTime;
    times.put(name, dtime);
    lastTime = newTime;
  }

  def endTime(name) {
    addTime(name);
    def dtime = lastTime - startTime;
    times.put("total", dtime);
  }

  def setXWiki(xwiki, xcontext, services) {
    this.xwiki = xwiki;
    this.xcontext = xcontext;
    this.request = xcontext.request;
    this.response = xcontext.response;
    this.services = services;
    this.countries = xwiki.parseGroovyFromPage("Sports.Code.Countries");
  }

  def addSource(source) {
    def key = (source.type) ? "${source.sport}-${source.type}" : source.sport;
    if (sources.get(key)==null) {
      sources.put(key, source)
    }
    key = (source.type) ? "${source.competition}-${source.type}" : source.competition;
    if (sources.get(key)==null) {
      sources.put(key, source)
    }
    key = (source.type) ? "${source.sport} ${source.competition}-${source.type}" : "${source.sport}-${source.competition}";
    if (sources.get(key)==null) {
      sources.put(key, source)
    }
  }

  def getSource(sport, type) {
    def key = (type) ? "${sport}-${type}" : sport;
    return sources.get(key);
  }

  def loadSources(force) {
    if (sources.size()==0||force) {
      sources = [:]
      def sourcePages = services.query.xwql("select doc.fullName from Document doc, doc.object(Sources.Code.SourcesClass) as item where doc.name&lt;&gt;'SourcesTemplate'").execute();
      for (sourcePage in sourcePages) {
        addSource(loadSource(sourcePage));
      }
    }
    return sources
  }

  def loadSource(sourcePage) {
    def sourceDoc = xwiki.getDocument(sourcePage)
    def sportDoc = xwiki.getDocument(sourceDoc.getValue("sport"))
    def competitionDoc = xwiki.getDocument(sourceDoc.getValue("competition"))
    def sportSpace = sportDoc.getSpace();
    def urls = sourceDoc.getValue("urls")
    def urlList = []
    urlList.add(sourceDoc.getValue("url"))
    if (urls!=null) {
      urlList.addAll(urls.split("\n"))
    }
    def source = ["title" : sourceDoc.title, "url" : sourceDoc.getValue("url"), "urls": urlList, "viewUrl" : sourceDoc.getValue("viewUrl"), "sportPage" : sourceDoc.getValue("sport"), "competitionPage" : sourceDoc.getValue("competition"), "year" : sourceDoc.getValue("year"), "gameSpace" : "${sportSpace}.Games", "playerSpace" : "${sportSpace}.Players", "type" : "0", "startDate" : sourceDoc.getValue("startDate"), "endDate" : sourceDoc.getValue("endDate"), "monitor" : true]
    def options = sourceDoc.getValue("parameters")
    if (options &amp;&amp; options.trim()!="") {
      def jsonSlurper = new JsonSlurper()
      try {
        def opt = jsonSlurper.parseText(options)
        opt.each { key, val -&gt;
          source[key] = val;
        }
      } catch (e) {
        addDebug("Failed to parse ${options}")
      }
    }
    return source;
  }
  // sg.addSource([ "url" : "https://en.wikipedia.org/wiki/2019_French_Open_%E2%80%93_Men%27s_Singles?action=raw", "sport" : "tennis", "type" : "0", "code" : "Sports.Code.Tennis", "gameSpace" : "Sports.Tennis.Games", "playerSpace" : "Sports.Tennis.Players", "competition" : "Sports.Tennis.RolandGarros", "year" : "2019"])



  def savePlayer(player, playerSpace, sport) {
    def className = "Players.Code.PlayersClass"
    if (player!=null &amp;&amp; player.trim()!="") {
      def playerPageName = playerSpace + "." + player;
      addDebug("Ready to save player " + playerPageName)
      if (!xwiki.exists(playerPageName)) {
        addDebug("Saving player " + playerPageName)
        def playerDoc = xwiki.getDocument(playerPageName)
        playerDoc.use(playerDoc.getObject(className, true))
        playerDoc.setTitle(player);
        playerDoc.set("sport", sport);
        playerDoc.save("Creating player")
      }
      return playerPageName.toString();
    }
    return null;
  }

  def saveGames(games, source) {
    def className = "Games.Code.GamesClass";
    def counter = 1;
    for (g in games) {
      def player1PageName = savePlayer(g.player1, source.playerSpace, source.sportPage)
      def player2PageName = savePlayer(g.player2, source.playerSpace, source.sportPage)
      def winnerPageName = savePlayer(g.winner, source.playerSpace, source.sportPage)
      addDebug("Ready to save game " + g.title + " " + player1PageName + " " + player2PageName + " " + winnerPageName)
      if (g.type!="Stage" &amp;&amp; (player1PageName==null || player2PageName==null)) {
        addDebug("No saving")
        continue;
      }
      def sid;
      sid = (g.type=="Stage" || source.useTitle) ? "${source.competition}${source.year}${g.title}" : "${source.competition}${source.year}${g.player1}${g.player2}"
      def id = sid.hashCode()
      if (id&lt;0) id=-id
      def gamePageName = "${source.gameSpace}.${id}";
      def sgamePageName = gamePageName.toString()
      def gameDoc = xwiki.getDocument(sgamePageName)
      if (gameDoc.isNew()||gameDoc.getObject(className)) {
        def needsSave = false;
        gameDoc.use(gameDoc.getObject(className, true))
        def players =[player1PageName, player2PageName]
        def currentPlayers = gameDoc.getValue("players")
        if (currentPlayers!=null &amp;&amp; currentPlayers.size()!=0 &amp;&amp; currentPlayers.join(",")!=players.join(",")) {
          gameDoc.set("players", players);
          addDebug("players changed")
          needsSave = true;
        }
        if (g.title &amp;&amp; g.title!="" &amp;&amp; gameDoc.getTitle()!=g.title) {
          gameDoc.setTitle(g.title);
          addDebug("title changed");
          needsSave = true;
        }
        if (g.winner &amp;&amp; g.winner!="" &amp;&amp; gameDoc.getValue("winner")!= winnerPageName) {
          gameDoc.set("winner", winnerPageName);
          addDebug("winner changed")
          needsSave = true;
        }

        def status = (g.finished) ? "finished" : (g.future ? "future" : "");
        if (gameDoc.getValue("status")!= status) {
          gameDoc.set("status", status);
          addDebug("status changed")
          needsSave = true;
        }

        if (g.score &amp;&amp; g.score!="" &amp;&amp; gameDoc.getValue("score")!= g.score) {
          addDebug("score changed")
          gameDoc.set("score", g.score);
          needsSave = true;
        }
        if (g.detailedScore &amp;&amp; g.detailedScore!="" &amp;&amp; gameDoc.getValue("detailedScore")!= g.detailedScore) {
          addDebug("detailedScore changed")
          gameDoc.set("detailedScore", g.detailedScore);
          needsSave = true;
        }
        if (g.gameDate &amp;&amp; g.gameDate!="" &amp;&amp; gameDoc.getValue("gameDate")!= g.gameDate) {
          addDebug("gameDate changed")
          gameDoc.set("gameDate", g.gameDate);
          needsSave = true;
        }

        def estimatedDate = g.gameDate;
        // Special updateGameDate &amp; estimatedGameDate
        if (g.finished &amp;&amp; gameDoc.getValue("updatedGameDate")==null) {
          addDebug("updatedGameDate changed")
          def updatedDate = new Date();
          gameDoc.set("updatedGameDate", updatedDate);
          if (estimatedDate==null &amp;&amp; updatedDate&lt;source.endDate) {
            estimatedDate = updatedDate
          }
          needsSave = true;
        }
        if (estimatedDate &amp;&amp; gameDoc.getValue("estimatedGameDate")!=estimatedDate) {
          addDebug("estimatedGameDate changed")
          gameDoc.set("estimatedGameDate", estimatedDate);
          needsSave = true;
        }

        if (gameDoc.getValue("competition")!= source.competitionPage) {
          addDebug("competition changed")
          gameDoc.set("competition", source.competitionPage);
          needsSave = true;
        }
        if (gameDoc.getValue("sport")!= source.sportPage) {
          addDebug("sport changed")
          gameDoc.set("sport", source.sportPage);
          needsSave = true;
        }
        if (g.level!=null &amp;&amp; gameDoc.getValue("gameLevel") != g.level) {
          addDebug("level changed " + g.level)
          gameDoc.set("gameLevel", g.level);
          needsSave = true;
        }
        if (gameDoc.getValue("order")!=counter) {
          addDebug("counter changed")
          gameDoc.set("order", counter);
          // The order change should not trigger a save
          // needsSave = true;
        }
        if (needsSave) {
          addDebug("Saving game ${sgamePageName}")
          gameDoc.save("Creating game")
        }
        counter++;
      }
    }
  }

  def getResults(player, sport, type, lastNb, nextNb) {
    return getResults(player, sport, type, lastNb, nextNb, false);
  }
  
  def getData(source) {
    def data = ""
    for (def url in source.urls) {
       data += xwiki.getURLContent(url)
    }
    return data;
  }
  
  def getResults(player, sport, type, lastNb, nextNb, save) {
    startTime()
    def source = getSource(sport, type);
    if (source==null) {
      addDebug("No matching source for " + sport + " and type " + type)
      return ["text": "No matching source for " + sport + " and type " + type];
    }
    if (source.useCountryCode) {
      addDebug("Converting " + player)
      player = countries.getCountryCode(player);
      addDebug("New player " + player)
    }
    codeGroovy = xwiki.parseGroovyFromPage(source.code)
    codeGroovy.setXWiki(xwiki, xcontext, this)
    addDebug("URL: ${source.url}")
    def data = getData(source)
    addTime("source")
    def games = codeGroovy.getResults(data, player, source)
    addTime("results")
    if (save || request.save) {
      saveGames(games, source)
    }
    addTime("save")
    def json = filterResults(games, player, lastNb, nextNb)
    endTime("filter")
    json.times = times;
    json.source = source;
    if (request!=null &amp;&amp; request.debug)
     json.debug = debug;
    return json;
  }

  def getGameName(level) {
    def gameName = "game"
    if (level=="Q")
    gameName = "Quarter-final"
    else if (level=="D")
      gameName = "Semi-final"
    else if (level=="S")
      gameName = "Semi-final"
    if (level=="F")
    gameName = "Final"
    return gameName
  }

  def filterResults(games, player, lastNb, nextNb) {
    def json = [:]
    try {
      def results = []
      for (g in games) {
        if (player=="") {
          results.add(g)
        }
        else if ((g.player1!=null &amp;&amp; g.player1.toLowerCase().contains(player.toLowerCase()))||(g.player2!=null) &amp;&amp; g.player2.toLowerCase().contains(player.toLowerCase()))
          results.add(g)
      }
      def df = DateTimeFormat.forPattern("dd/MMM/yyyy").withLocale(new Locale("en"))
      def currentNextNb = 0;
      def currentLastNb = 0;
      json.nextGames = []
      json.lastResults = []
      json.nextGamesTexts = []
      json.lastResultsTexts = []

      json.text = "";
      def nextGameAdded = false;
      for (res in results) {
        if (res.gameDate &amp;&amp; res.gameDate!="")
        res.formattedDate = df.print(new DateTime(res.gameDate));
      }

      // We should sort the results by gameDate if it's there
      results.sort { it.gameDate }

      for (res in results) {
        def gameName = getGameName(res.level)

        if (res.future) {
          // Handling the case of a future game
          if (currentNextNb&lt;nextNb) {
            currentNextNb++;
            def message = ""
            if (res.type=="Stage") {
              message = "The next race is ${res.title}"
            } else if (gameName=="game") {
              message = "The next game is ${res.player1} against ${res.player2}"
            } else
              message = "The next game is the ${gameName} ${res.player1} against ${res.player2}, "
            if (res.formattedDate) {
              message += " on ${res.formattedDate}"
            }
            json.nextGamesTexts.add(message)
          }
          json.nextGames.add(res)
        }
      }
      def myresults = results.reverse()
      for (res in myresults) {
        def gameName = getGameName(res.level)
        if (res.finished) {
          // Handling the case of a finished game
          if (currentLastNb&lt;lastNb) {
            currentLastNb++;
            def message = ""

            if (res.winner==null) {
              message = "${res.player1} and ${res.player2} have tied in the ${gameName} with score ${res.score}"
            }  else {
              if (res.type=="Stage") {
                message = "${res.player1} has won the race ${res.title}"
              } else if (res.winner==res.player1) {
                message = "${res.player1} has won the ${gameName} against ${res.player2} ${res.score}"
              } else {
                message = "${res.player1} has lost the ${gameName} against ${res.player2} ${res.score}"                
              }
            }
           if (res.formattedDate) {
              message += " on ${res.formattedDate}"
            }
            json.lastResultsTexts.add(message)
          }
          json.lastResults.add(res)
        } else if (!res.future) {
          // Handling the case of a game in progress (not future, not finished)
          if (currentLastNb&lt;lastNb) {
            currentLastNb++;
            def message = ""

            message = "${res.player1} against ${res.player2} has current score ${res.score}"
            if (res.formattedDate) {
              message += " on ${res.formattedDate}"
            }
            json.lastResultsTexts.add(message)
          }
          json.lastResults.add(res)
        }
      }
      json.text = json.lastResultsTexts.join(", ") + " " + json.nextGamesTexts.join(", ")
    } catch (e) {
      json.text = "Error filtering results"
      json.error = e.getMessage()
      json.exception = e.getStackTrace().toString()
    }
    return json;
  }

  def monitor(logPage) {
    try {
      def handledSources = []
      def sources = loadSources(true);
      def currentDate = new Date();
      for (source in sources.values()) {
        if (!handledSources.contains(source.url)) {
          // addDebug("Sources " + source.startDate + " - " + source.endDate)
          handledSources.add(source.url)
          // check competition date with a margin of 3 days
          if (currentDate&gt;source.startDate-3 &amp;&amp; currentDate &lt; source.endDate+3 &amp;&amp; source.monitor!=false) {
             addDebug("Source should be monitored: " + source.title)
             getResults("", source.competition, source.type, 0, 0, true)
          }
        }
      }
    } catch (e) {
      addDebug("Exception: " + e)
      addDebug(e.getStackTrace().toString())
    } finally {
      def logDoc = xwiki.getDocument(logPage);
      logDoc.setContent(debug)
      logDoc.save("Ran monitoring")
    }
  }
}
// {{/groovy}}</content>
</xwikidoc>
