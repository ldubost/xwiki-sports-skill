<?xml version="1.0" encoding="UTF-8"?>

<xwikidoc version="1.3" reference="Sports.Code.Groovy" locale="">
  <web>Sports.Code</web>
  <name>Groovy</name>
  <language/>
  <defaultLanguage>en</defaultLanguage>
  <translation>0</translation>
  <creator>xwiki:XWiki.Admin</creator>
  <creationDate>1546297200000</creationDate>
  <author>xwiki:XWiki.Admin</author>
  <contentAuthor>xwiki:XWiki.Admin</contentAuthor>
  <date>1546297200000</date>
  <contentUpdateDate>1546297200000</contentUpdateDate>
  <version>1.1</version>
  <title/>
  <comment/>
  <minorEdit>false</minorEdit>
  <syntaxId>xwiki/2.1</syntaxId>
  <hidden>false</hidden>
  <content>// {{groovy}}
import groovy.json.JsonOutput;
import org.joda.time.format.DateTimeFormat;

public class Sports {
  def xwiki;
  def xcontext;
  def request;
  def response;
  def codeGroovy;

  def debug = "";
  def times = [:]
  def startTime;
  def lastTime;
  def sources = [:]
  def static cache = [:]

  def addDebug(str) {
    debug += str + "\n";
  }

  def startTime() {
    startTime = (new Date()).getTime()
    lastTime = startTime;
  }
  
  def addTime(name) {
    def newTime = (new Date()).getTime()
    def dtime = newTime - lastTime;
    times.put(name, dtime);
    lastTime = newTime;
  }
  
  def endTime(name) {
    addTime(name);
    def dtime = lastTime - startTime;
    times.put("total", dtime);
  }
  
  def setXWiki(xwiki, xcontext) {
    this.xwiki = xwiki;
    this.xcontext = xcontext;
    this.request = xcontext.request;
    this.response = xcontext.response;
  }

  def addSource(source) {
    def key = (source.type) ? "${source.sport}-${source.type}" : source.sport;
    if (sources.get(key)==null) {
      sources.put(key, source)
    }
  }
    
  def getSource(sport, type) {
    def key = (type) ? "${sport}-${type}" : sport;
    return sources.get(key);
  }
  
  def getResults(player, sport, type) {
     startTime()
     def source = getSource(sport, type);
     if (source==null)
        return [:];
     codeGroovy = xwiki.parseGroovyFromPage(source.code)
     codeGroovy.setXWiki(xwiki, xcontext, this)
     def data = xwiki.getURLContent(source.url)
     addTime("source")
     def games = codeGroovy.getResults(data, player)
     addTime("results")
     if (request.save) {
          codeGroovy.saveResults(games, source)
     }
     addTime("save")
     def json = filterResults(games, player)
     endTime("filter")
     json.times = times;
     if (request.debug)
      json.debug = debug;
     return json;
  }
  
  def filterResults(games, player) {
    def results = []
    for (g in games) {
      if ((g.player1!=null &amp;&amp; g.player1.toLowerCase().contains(player.toLowerCase()))||(g.player2!=null) &amp;&amp; g.player2.toLowerCase().contains(player.toLowerCase()))
      results.add(g)
    }
    def json = [:]
    json.results = results;
    json.text = "";
    results = results.reverse()
    def nextGameAdded = false;
    for (res in results) {
      if (res.winner==null) {
        if (res.score==null||res.score.trim()=="") {
          json.text = "The next game is ${res.player1} against ${res.player2}, "
        } else {
          json.text+= "The score of ${res.player1} against ${res.player2} is currently ${res.score}"
          break;
        }
      } else {
        if (res.winner.toLowerCase().contains(player.toLowerCase())) {
          if (res.player1.toLowerCase().contains(player.toLowerCase()))
          json.text+= "${res.player1} has won the game ${res.player1} against ${res.player2} ${res.score}"
          else
            json.text+= "${res.player2} has won the game ${res.player1} against ${res.player2} ${res.score}"
        } else {
          if (res.player1.toLowerCase().contains(player.toLowerCase()))
          json.text+= "${res.player1} has lost the game ${res.player1} against ${res.player2} ${res.score}"
          else
            json.text+= "${res.player2} has lost the game ${res.player1} against ${res.player2} ${res.score}"
        }
        break;
      }
    }

    return json;
  }
}
// {{/groovy}}</content>
</xwikidoc>
