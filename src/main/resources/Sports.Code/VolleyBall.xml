<?xml version="1.0" encoding="UTF-8"?>

<xwikidoc version="1.3" reference="Sports.Code.VolleyBall" locale="">
  <web>Sports.Code</web>
  <name>VolleyBall</name>
  <language/>
  <defaultLanguage>en</defaultLanguage>
  <translation>0</translation>
  <creator>xwiki:XWiki.Admin</creator>
  <creationDate>1546297200000</creationDate>
  <author>xwiki:XWiki.Admin</author>
  <contentAuthor>xwiki:XWiki.Admin</contentAuthor>
  <date>1546297200000</date>
  <contentUpdateDate>1546297200000</contentUpdateDate>
  <version>1.1</version>
  <title/>
  <comment/>
  <minorEdit>false</minorEdit>
  <syntaxId>xwiki/2.1</syntaxId>
  <hidden>false</hidden>
  <content>// {{groovy}}
import groovy.json.JsonOutput;
import org.joda.time.format.DateTimeFormat;

public class VolleyBall {
  def xwiki;
  def xcontext;
  def request;
  def response;
  def sports;
  
  def addDebug(str) {
    sports.addDebug(str);
  }

  def setXWiki(xwiki, xcontext, sports) {
    this.xwiki = xwiki;
    this.xcontext = xcontext;
    this.request = xcontext.request;
    this.response = xcontext.response;
    this.sports = sports;
  }
  
  def saveTeam(player, playerSpace) {
      if (player!=null &amp;&amp; player.trim()!="") {
       def playerPageName = playerSpace + "." + player;
       addDebug("Ready to save team " + playerPageName)
       if (!xwiki.exists(playerPageName)) {
          addDebug("Saving team " + playerPageName)
          def playerDoc = xwiki.getDocument(playerPageName)
          playerDoc.use(playerDoc.getObject("Sports.Volley-Ball.Teams.Code.TeamsClass", true))
          playerDoc.setTitle(player);
          playerDoc.save("Creating team")
       }
        return playerPageName;
      }
      return null;
  }

  def saveResults(games, source) {
    def className = "Sports.Volley-Ball.Games.Code.GamesClass";
    for (g in games) {
      def player1PageName = saveTeam(g.player1, source.playerSpace)
      def player2PageName = saveTeam(g.player2, source.playerSpace)
      def winnerPageName = saveTeam(g.winner, source.playerSpace)
      addDebug("Ready to save game " + player1PageName + " " + player2PageName + " " + winnerPageName)
      if (player1PageName==null || player2PageName==null) {
        addDebug("No saving")
        continue;
      }
      def sid = "${source.competition}${source.year}${g.player1}${g.player2}"
      def id = sid.hashCode()
      if (id&lt;0) id=-id
      def gamePageName = "${source.gameSpace}.${id}";
      def sgamePageName = gamePageName.toString()
      def gameDoc = xwiki.getDocument(sgamePageName)
      if (gameDoc.isNew()||gameDoc.getObject(className)) {
          def needsSave = false;
          gameDoc.use(gameDoc.getObject(className, true))
          if (gameDoc.getValue("team1")!= player1PageName) {
             gameDoc.set("team1", player1PageName);
             addDebug("player1 changed")
             needsSave = true;
          }
          if (gameDoc.getValue("team2")!= player2PageName) {
             gameDoc.set("team2", player2PageName);
             addDebug("player2 changed")
             needsSave = true;
          }
          if (g.winner &amp;&amp; g.winner!="" &amp;&amp; gameDoc.getValue("winner")!= winnerPageName) {
             gameDoc.set("winner", winnerPageName);
             addDebug("winner changed")
             needsSave = true;
          }
          if (g.score &amp;&amp; g.score!="" &amp;&amp; gameDoc.getValue("score")!= g.score) {
             addDebug("score changed")
             gameDoc.set("score", g.score);
             needsSave = true;
          }
          if (g.detailedScore &amp;&amp; g.detailedScore!="" &amp;&amp; gameDoc.getValue("detailedScore")!= g.detailedScore) {
             addDebug("detailedScore changed")
             gameDoc.set("detailedScore", g.detailedScore);
             needsSave = true;
          }
        
          def df = DateTimeFormat.forPattern('yyyy dd MMM HH:mm').withLocale(new Locale("en"))
          def currentDate = gameDoc.display("gameDate")
          def sdate = source.year + " " + g.date + " " + g.time;
          gameDoc.set("gameDate", df.parseDateTime(sdate).toDate())
          def newDate = gameDoc.display("gameDate")
          if (g.date &amp;&amp; g.date!="" &amp;&amp; currentDate!=newDate) {
             addDebug("gameDate changed")
             needsSave = true;
          }
          if (gameDoc.getValue("competition")!= source.competition) {
             addDebug("competition changed")
             gameDoc.set("competition", source.competition);
             needsSave = true;
          }
          def currentYear = gameDoc.display("year")
          gameDoc.set("year", source.year);
          def newYear = gameDoc.display("year")
          if (currentYear!=newYear) {
             addDebug("year changed")
             needsSave = true;
          }
          if (needsSave) {
             addDebug("Saving game ${sgamePageName}")
             gameDoc.save("Creating game")
          }
       }
    }
  }

  def cleanScore(score) {
    return score.replaceAll("\\u2013", " ");
  }
  
  def getResults(data, currentPlayer) {
    def cacheId = data.hashCode();
    def games = []

    if (sports.cache.get(cacheId)!=null &amp;&amp; !request.force) {
      addDebug("From cache");
      games = sports.cache.get(cacheId);
    } else {
      def m = data =~ /\{\{Vb res.*?\|(.*?)\|(.*?)\|\{\{vb.*?\|(.*?)\}\}\|([0-9]*?).([0-9]*?)\|\{\{vb.*?\|(.*?)\}\}\|(.*?)\|11=/
      // Sample output {{Vb res 51|31 May|16:00|{{vb-rt|IRI}}|3–1|{{vb|ITA}}|20–25|25–23|25–23|25–23||11=[http://www.fivb.org/vis2009/getdocument.asmx?no=256206729 P2 Report]}}

      addDebug("Found: " + m.count + " items");
       (0..&lt;m.count).each {
         def game = [:]
         game.date = m[it][1]
         game.time = m[it][2]
         game.player1 = m[it][3]
         game.player2 = m[it][6]
         def set1 = cleanScore(m[it][4]);
         def set2 = cleanScore(m[it][5]);
         game.score = set1 + " " + set2
         game.detailedScore = cleanScore(m[it][7])
         if (set1!="" &amp;&amp; set2!="") {
           def iset1 = Integer.parseInt(set1)
           def iset2 = Integer.parseInt(set2)
           if (iset1&gt;iset2)
            game.winner = game.player1
           if (iset2&gt;iset1)
            game.winner = game.player2
         }
         games.add(game)
      }
      sports.cache.put(cacheId, games);
    }
    return games;
  }
}
// {{/groovy}}</content>
</xwikidoc>
