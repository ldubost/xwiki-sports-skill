<?xml version="1.0" encoding="UTF-8"?>

<xwikidoc version="1.3" reference="Sports.Code.VolleyBall" locale="">
  <web>Sports.Code</web>
  <name>VolleyBall</name>
  <language/>
  <defaultLanguage>en</defaultLanguage>
  <translation>0</translation>
  <creator>xwiki:XWiki.Admin</creator>
  <creationDate>1546297200000</creationDate>
  <parent>Sports.Code.WebHome</parent>
  <author>xwiki:XWiki.Admin</author>
  <contentAuthor>xwiki:XWiki.Admin</contentAuthor>
  <date>1546297200000</date>
  <contentUpdateDate>1546297200000</contentUpdateDate>
  <version>1.1</version>
  <title/>
  <comment/>
  <minorEdit>false</minorEdit>
  <syntaxId>xwiki/2.1</syntaxId>
  <hidden>true</hidden>
  <content>// {{groovy}}
import groovy.json.JsonOutput;
import org.joda.time.format.DateTimeFormat;

public class VolleyBall {
  def xwiki;
  def xcontext;
  def request;
  def response;
  def sports;

  def addDebug(str) {
    sports.addDebug(str);
  }

  def setXWiki(xwiki, xcontext, sports) {
    this.xwiki = xwiki;
    this.xcontext = xcontext;
    this.request = xcontext.request;
    this.response = xcontext.response;
    this.sports = sports;
  }

  def cleanScore(score) {
    return score.replaceAll("\\u2013", " ");
  }

  def getResults(data, currentPlayer, source) {
    def cacheId = data.hashCode();
    def games = []

    if (sports.cache.get(cacheId)!=null &amp;&amp; (request!=null &amp;&amp; !request.force)) {
      addDebug("From cache");
      games = sports.cache.get(cacheId);
    } else {
      def m = data =~ /\{\{Vb res.*?\|(.*?)\|(.*?)\|\{\{vb.*?\|(.*?)\}\}\|([0-9]*?).([0-9]*?)\|\{\{vb.*?\|(.*?)\}\}\|(.*?)\|11=/
      // Sample output {{Vb res 51|31 May|16:00|{{vb-rt|IRI}}|3–1|{{vb|ITA}}|20–25|25–23|25–23|25–23||11=[http://www.fivb.org/vis2009/getdocument.asmx?no=256206729 P2 Report]}}
      def df = DateTimeFormat.forPattern('yyyy dd MMM HH:mm').withLocale(new Locale("en"))

      addDebug("Found: " + m.count + " items");
       (0..&lt;m.count).each {
         def game = [:]
         def sdate = source.year + " " + m[it][1] + " " + m[it][2];
         game.gameDate = df.parseDateTime(sdate).toDate();
         game.player1 = m[it][3];
         game.player2 = m[it][6];
         game.title = game.player1 + " vs " + game.player2 + " " + m[it][1]
         def set1 = cleanScore(m[it][4]);
         def set2 = cleanScore(m[it][5]);
         game.score = set1 + " " + set2
         game.detailedScore = cleanScore(m[it][7])
         if (set1!="" &amp;&amp; set2!="") {
           def iset1 = Integer.parseInt(set1)
           def iset2 = Integer.parseInt(set2)
           if (iset1&gt;iset2) {
            game.winner = game.player1
            game.finished = true;
           } else if (iset2&gt;iset1) {
            game.winner = game.player2
            game.finished = true;
           }
         } else {
            game.future = true;
         }
         games.add(game)
      }
      sports.cache.put(cacheId, games);
    }
    return games;
  }
}
// {{/groovy}}</content>
</xwikidoc>
