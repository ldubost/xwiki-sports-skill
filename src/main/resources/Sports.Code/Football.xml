<?xml version="1.0" encoding="UTF-8"?>

<xwikidoc version="1.3" reference="Sports.Code.Football" locale="">
  <web>Sports.Code</web>
  <name>Football</name>
  <language/>
  <defaultLanguage>en</defaultLanguage>
  <translation>0</translation>
  <creator>xwiki:XWiki.Admin</creator>
  <creationDate>1546297200000</creationDate>
  <parent>WebHome</parent>
  <author>xwiki:XWiki.Admin</author>
  <contentAuthor>xwiki:XWiki.Admin</contentAuthor>
  <date>1546297200000</date>
  <contentUpdateDate>1546297200000</contentUpdateDate>
  <version>1.1</version>
  <title>Football</title>
  <comment/>
  <minorEdit>false</minorEdit>
  <syntaxId>xwiki/2.1</syntaxId>
  <hidden>true</hidden>
  <content>// {{groovy}}
import groovy.json.JsonOutput;
import org.joda.time.format.DateTimeFormat;

public class Soccer {
  def xwiki;
  def xcontext;
  def request;
  def response;
  def sports;

  def addDebug(str) {
    sports.addDebug(str);
  }

  def setXWiki(xwiki, xcontext, sports) {
    this.xwiki = xwiki;
    this.xcontext = xcontext;
    this.request = xcontext.request;
    this.response = xcontext.response;
    this.sports = sports;
  }

  def cleanScore(score) {
    return score.replaceAll("\\u2013", " ");
  }

  def getResults(data, currentPlayer, source) {
    def cacheId = data.hashCode();
    def games = []

    if (sports.cache.get(cacheId)!=null &amp;&amp; !request.force) {
      addDebug("From cache");
      games = sports.cache.get(cacheId);
    } else {
      /* Sample output 
      {{Feuille de match
| titre = Match 1
| date = {{date|7|juin|2019|en football}}
| heure = 21:00
| historique = 
| équipe 1 = '''{{FRA football féminin|d}}'''
| équipe 2 = {{KOR football féminin}}
| score = 4 - 0
| score mi-temps = 3 - 0
| buts 1 = ([[Amandine Henry|Henry]] {{passe décisive}}) [[Eugénie Le Sommer|Le Sommer]] {{but|9}} &lt;br&gt; ([[Gaëtane Thiney|Thiney]] {{passe décisive}}) [[Wendie Renard|Renard]] {{but|35}} &lt;br&gt; ([[Amel Majri|Majri]] {{passe décisive}}) [[Wendie Renard|Renard]] {{but|45+2}} &lt;br&gt; ([[Eugénie Le Sommer|Le Sommer]] {{passe décisive}}) [[Amandine Henry|Henry]] {{but|85}}
| buts 2 = 
| stade = [[Parc des Princes]], [[Paris]]
| affluence = {{formatnum:45261}}
| arbitre = {{URU-d}} [[Claudia Umpiérrez]]
| rapport = [https://fr.fifa.com/womensworldcup/matches/match/300438238/#undefined Rapport]
}}
*/
      def df = DateTimeFormat.forPattern('d-MMM-yyyy-HH:mm').withLocale(new Locale("fr"))
      def m = data =~ /(?ms)\{\{(Feuille de match|Footballbox).*?\n(.*?)\n\}\}/
      addDebug("Found: " + m.count + " items");
       (0..&lt;m.count).each {
         def matchData = m[it][2];
         def matchMap = [:]
         def m2 = matchData =~ /\|(.*?)=(.*)/
         (0..&lt;m2.count).each {
            matchMap.put(m2[it][1].trim(), m2[it][2].trim())
         }
         addDebug("Map: ${matchMap}")
         def game = [:]
         def p1m = (matchMap.get("\u00e9quipe 1") =~ /.*?\{\{([a-zA-Z][a-zA-Z][a-zA-Z]).*/)
         game.player1 = p1m.count&gt;0 ? p1m[0][1] : ""
         def p2m = (matchMap.get("\u00e9quipe 2") =~ /.*?\{\{([a-zA-Z][a-zA-Z][a-zA-Z]).*/)
         if (game.player1.contains("dra"))
          game.player1 = "TBD"
         game.player2 = p2m.count&gt;0 ? p2m[0][1] : ""
         if (game.player2.contains("dra"))
          game.player2 = "TBD"
         if (game.player1!="TBD" || game.player2!="TBD") {
          game.score = matchMap.get("score")
         if (game.score=="-")
           game.score = ""
         if (game.score=="") {
           game.future = true;
         } else {
           // we consider that if the score is there, then the game is finished.
           // this will need to be verified.
           game.finished = true;
         }
         def dm = (matchMap.get("date") =~ /\{\{date.*?\|(.*?\|.*?\|.*?\|).*?/)
         def hm = (matchMap.get("heure") =~ /.*?([0-9][0-9].[0-9][0-9]).*/)

         def sheure = (hm.count&gt;0) ? hm[0][1] : ""
         def sdate = (dm.count&gt;0) ? (dm[0][1].replaceAll("\\|", "-") + sheure) : ""
         if (sdate!="") {
           addDebug("Found date: ${sdate}")
           try {
            game.gameDate = df.parseDateTime(sdate).toDate()
           } catch (e) {
             addDebug("Failed to parse date ${sdate} ${sheure}")
           }
         }
         def sm = game.score =~ /([0-9]*?)\s.*?\s([0-9]?)/
         def goal1 = (sm.count==0 || sm[0][1].trim()=="") ? 0 : Integer.parseInt(sm[0][1])
         def goal2 = (sm.count==0 || sm[0][2].trim()=="") ? 0 : Integer.parseInt(sm[0][2])
         if (goal1&gt;goal2)
            game.winner = game.player1
         if (goal2&gt;goal1)
            game.winner = game.player2
         games.add(game)
         addDebug("Found: ${game}")
         }
       }

      sports.cache.put(cacheId, games);
    }
    return games;
  }
}
// {{/groovy}}</content>
</xwikidoc>
