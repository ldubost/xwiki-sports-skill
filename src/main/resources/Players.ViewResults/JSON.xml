<?xml version="1.0" encoding="UTF-8"?>

<xwikidoc version="1.3" reference="Players.ViewResults.JSON" locale="">
  <web>Players.ViewResults</web>
  <name>JSON</name>
  <language/>
  <defaultLanguage>en</defaultLanguage>
  <translation>0</translation>
  <creator>xwiki:XWiki.Admin</creator>
  <creationDate>1546297200000</creationDate>
  <author>xwiki:XWiki.Admin</author>
  <contentAuthor>xwiki:XWiki.Admin</contentAuthor>
  <date>1546297200000</date>
  <contentUpdateDate>1546297200000</contentUpdateDate>
  <version>1.1</version>
  <title/>
  <comment/>
  <minorEdit>false</minorEdit>
  <syntaxId>xwiki/2.1</syntaxId>
  <hidden>false</hidden>
  <content>{{groovy}}
import groovy.json.JsonOutput;
  
def url = (request.type=="1") ?  "https://en.wikipedia.org/wiki/2019_French_Open_%E2%80%93_Women%27s_Singles?action=raw" : "https://en.wikipedia.org/wiki/2019_French_Open_%E2%80%93_Men%27s_Singles?action=raw"
def data = xwiki.getURLContent(url)

def cleanScore (score) {
  if (score=="&lt;small&gt;w/o&lt;/small&gt;")
    return -1;
  if (score.contains("&lt;sup&gt;r&lt;/sup&gt;"))
    return -1;
  def s = score.replaceAll("'*","").replaceAll("&lt;sup&gt;.*(&lt;/sup&gt;)*","");
  if (s=="")
    return 0;
  else
    return Integer.parseInt(s.trim());
}

def getResults(data, currentPlayer) {
 def games = []
 def game = [:]
 def set = [:]
 def player1 = false;
 def m = data =~ /RD[0-9]-(.*?)=(.*)/
 if (request.debug) {
   println "Found: " + m.count + " items";
 }
 (0..&lt;m.count).each {
  if (m[it][1].contains("team")) {
    if (request.debug)
      println "In player"
    player1 = !player1
    if (player1) {
      if (game.player1!=null)
         games.add(game);
      game = [:]
      set = [:]
    }
    def player = m[it][2]
    def regex = /\[\[(.*?)(\||\])/
    def m1 = player =~ regex
    if (m1.count&gt;0) {
      def splayer = m1[0][1].replaceAll(" \\(.*\\)","")
      if (request.debug)
        println "Player: " + splayer;
      if (player1) {
         game.player1 = splayer
      } else {
         game.player2 = splayer
      }
    }
  } else {
       def score = m[it][2]
       def regex1 = /score[0-9]+-([0-9])/
       def m1 = m[it][1] =~ regex1
       if (m1 &amp;&amp; m1.count&gt;0) {
         def currentSet = set[m1[0][1]]
         if (request.debug)
           println "In score: " + currentSet + " " + cleanScore(score)
         if (currentSet==null) {
            set[m1[0][1]] = [:]
            currentSet = set[m1[0][1]];
         }
         if (player1) {
          currentSet.player1 = cleanScore(score)
         } else {
          currentSet.player2 = cleanScore(score)
          if (currentSet.player1&gt;currentSet.player2) {
           set["player1"] = (set["player1"]==null) ? 1 : set["player1"]+1;
          }
          else if (currentSet.player2&gt;currentSet.player1){
           set["player2"] = (set["player2"]==null) ? 1 : set["player2"]+1;
          }
          if (currentSet.player1==-1)
           game.winner = game.player2
          if (currentSet.player2==-1)
           game.winner = game.player1

          if (set["player1"]==3 || (set["player1"]==2 &amp;&amp; request.type=="1"))
           game.winner = game.player1
          if (set["player2"]==3 || (set["player2"]==2 &amp;&amp; request.type=="1"))
           game.winner = game.player2
         }
         if (!player1) {
           if (currentSet.player1&gt;0 || currentSet.player2&gt;0) {
           if (!game.score)
            game.score = "";
           else
            game.score += " ";
           game.score += currentSet.player1 + " " + currentSet.player2
           }
         }
         game.set = set;
       }
  }
} 
// Adding the last game
games.add(game);

if (request.debug) {
for (g in games) {
  println "{{{ Game: ${g} }}}"
  println "* Player1: ${g.player1}"
  println "* Player2: ${g.player2}"
  println "* Winner: ${g.winner}"
  println "* Score: ${g.score}"
}
}

def results = []
for (g in games) {
  if ((g.player1!=null &amp;&amp; g.player1.toLowerCase().contains(currentPlayer.toLowerCase()))||(g.player2!=null) &amp;&amp; g.player2.toLowerCase().contains(currentPlayer.toLowerCase()))
   results.add(g)
}
 return results;
}

def player = "nadal"
if (request.player)
   player = request.player

def regex1 = (data =~ /(?ms)(===Finals===.*?===)/)
def regex2 = (data =~ /(?ms)(===Top half===.*)/)
def data1 = (regex1!=null &amp;&amp; regex1.size()&gt;0) ? regex1[0][1] : ""
def data2 = (regex2!=null &amp;&amp; regex2.size()&gt;0) ? regex2[0][1] : ""
if (request.debug) {
  println """Data1"""
  println """{{{ ${data1 }}}}"""
  println """Data2"""
  println """{{{ ${data2 }}}}"""
}
def results1 = getResults(data1, player);
def results2 = getResults(data2, player);
if (request.debug) {
  println """Results1: {{{ ${results1 }}}}"""
  println """Results2: {{{ ${results2 }}}}"""  
}
def results = results2
results.addAll(results1)
def json = [:]
json.results = results;
json.text = "";
results = results.reverse()
for (res in results) {
  if (res.winner==null) {
    if (res.score==null||res.score.trim()=="") {
      json.text+= "The next game is ${res.player1} against ${res.player2}"
    } else {
      json.text+= "The score of ${res.player1} against ${res.player2} is currently ${res.score}"
      break;
    }
  } else {
    if (res.winner.toLowerCase().contains(player.toLowerCase())) {
      if (res.player1.toLowerCase().contains(player.toLowerCase()))
       json.text+= "${res.player1} has won the game ${res.player1} against ${res.player2} ${res.score}"
      else
       json.text+= "${res.player2} has won the game ${res.player1} against ${res.player2} ${res.score}"
    } else {
      if (res.player1.toLowerCase().contains(player.toLowerCase()))
       json.text+= "${res.player1} has lost the game ${res.player1} against ${res.player2} ${res.score}"
      else
       json.text+= "${res.player2} has lost the game ${res.player1} against ${res.player2} ${res.score}"
    }
    break;
  }
}
  
print "{{{${JsonOutput.toJson(json)}}}}"
if (!request.debug)
  response.setContentType("application/json")
{{/groovy}}</content>
</xwikidoc>
